/**
 * Webpack config file.
 *
 * @since 1.0.0
 *
 * @internal Webpack is aware of this config file's location.
 *
 * @internal PLEASE DO NOT EDIT THIS FILE!
 * This file and the contents of it are updated automatically.
 * Instead of editing, please configure `composer.json`. See instructions below.
 * Instead of editing, please see source repository @ <https://git.io/JD8Zo>.
 */

/* @formatter:ignore
-----------------------------------------------------------------------------------------------------------------------
Example `extra.props-dev.webpack` using `composer.json`:
-----------------------------------------------------------------------------------------------------------------------
"extra" : {
	"props-dev" : {
		"webpack" : {
			"assetDirs" : [ "./src/assets" ]
		}
	}
}
-----------------------------------------------------------------------------------------------------------------------
Example directory structure expected for webpack:
-----------------------------------------------------------------------------------------------------------------------
./src/assets (or any other location)
	- styles/index.scss
	- scripts/index.js
	- webpack/ (output directory)
------------------------------------------------------------------------------------------------- @formatter:/ignore */

const path    = require( 'path' );
const miniCss = require( 'mini-css-extract-plugin' );
const mc      = require( '@clevercanyon/js-object-mc' );

module.exports = ( env, argv ) => {
	const file = {
		'composer.json' : {},
		'package.json'  : {},
	};
	try { file[ 'composer.json' ] = require( '../composer.json' ); } catch ( e ) {}
	try { file[ 'package.json' ] = require( '../package.json' ); } catch ( e ) {}

	const configs = [];
	const config  = mc.merge(
		{
			assetDirs : [ './src/assets' ],
			config    : {},
		},
		file[ 'composer.json' ]?.extra?.[ 'props-dev' ]?.webpack || {},
		file[ 'package.json' ]?.config?.[ 'props-dev' ]?.webpack || {},
	);

	( config.assetDirs || [] ).forEach( ( assetsDir ) => {
		assetsDir = path.resolve( __dirname, '../' + assetsDir );

		configs.push( mc.merge( {
			cache   : false,
			mode    : 'production',
			target  : 'browserslist',
			plugins : [ new miniCss( { filename : '[name].min.css' } ) ],
			module  : {
				rules : [
					{
						test : /\.(?:txt|md)$/i,
						use  : [ 'raw-loader' ],
					},
					{
						test : /\.(?:html)$/i,
						use  : [ 'html-loader' ],
					},
					{
						test : /\.(?:gif|jpe?g|png|svg|eot|ttf|woff[0-9]*)$/i,
						use  : [ 'file-loader' ],
					},
					{
						test : /\.(?:css|scss)$/i,
						use  : [ miniCss.loader, 'css-loader', 'postcss-loader', 'sass-loader' ],
					},
					{
						test    : /\.(?:js|jsx)$/i,
						exclude : [ /\/(?:node_modules\/(?:core-js|webpack\/buildin))\//i ],
						use     : [ 'babel-loader', '@linaria/webpack-loader' ],
					},
				],
			},
			entry   : {
				index : [
					assetsDir + '/styles/index.scss',
					assetsDir + '/scripts/index.js',
				],
			},
			output  : {
				path     : assetsDir + '/webpack',
				filename : '[name].min.js',
			},
		}, config.config || {} ) );
	} );

	return configs;
};
